---
import dayjs from "dayjs";
import timezone from "dayjs/plugin/timezone";
import utc from "dayjs/plugin/utc";
import { type HierarchicalBlogNode } from "../blogIndex";
import { parseInlineCode } from "../util/parseInlineCode";
import Breadcrumbs from "./Breadcrumbs.astro";
import KindIcon from "./KindIcon.astro";
import PostDates from "./PostDates.astro";

dayjs.extend(utc);
dayjs.extend(timezone);

interface Props {
    posts: HierarchicalBlogNode[];
}
const { posts } = Astro.props;

const kinds = Array.from(
    new Set(
        posts
            .map((node) => node.data?.kind)
            .filter((kind) => kind !== undefined),
    ),
);
---

<div id="post-listing-container">
    {
        kinds.length > 0 && (
            <div class="mb-8">
                <div class="flex flex-wrap items-center gap-2">
                    {kinds.map((kind) => (
                        <label class="filter-button flex cursor-pointer items-center gap-1 rounded bg-light-gray px-2 py-1 text-sm text-dark capitalize transition hover:bg-gray">
                            <input
                                type="checkbox"
                                name="filter"
                                value={kind}
                                class="sr-only"
                            />
                            <KindIcon kind={kind} class="inline-block size-4" />
                            {kind}
                        </label>
                    ))}
                </div>
            </div>
        )
    }

    <div class="flex flex-col gap-12">
        {
            posts.map((node) => {
                const itemKind = node.data?.kind;
                const pathParts = node.id.split("/").filter((s) => s);
                const itemBreadcrumbs = pathParts.map((segment, index, arr) => {
                    const fragment = arr.slice(0, index + 1).join("/");
                    return {
                        label: segment,
                        fragment: fragment,
                        linkTo: index < arr.length - 1,
                    };
                });

                return (
                    <div
                        class="post-item flex flex-col gap-1"
                        data-kind={itemKind ?? ""}
                    >
                        <div class="flex flex-row items-center gap-1">
                            <KindIcon
                                kind={itemKind}
                                isFolder={node.isFolder}
                                class="size-4 stroke-dark-gray"
                            />
                            {itemBreadcrumbs.length > 0 && (
                                <Breadcrumbs
                                    baseUrl="/posts"
                                    breadcrumbs={itemBreadcrumbs}
                                />
                            )}
                        </div>

                        <h2 class="font-serif text-2xl font-semibold text-dark">
                            <a href={`/posts/${node.id}/`} data-astro-prefetch>
                                <Fragment
                                    set:html={parseInlineCode(node.title)}
                                />
                            </a>
                        </h2>

                        {node.data?.description && !node.isFolder && (
                            <span class="font-sans text-sm/snug text-dark-gray italic">
                                <Fragment
                                    set:html={parseInlineCode(
                                        node.data.description,
                                    )}
                                />
                            </span>
                        )}

                        {!node.isFolder && node.data?.published && (
                            <PostDates
                                createdTime={dayjs(node.data.published)}
                                lastModified={dayjs(node.data.published)}
                                iconSize="sm"
                                textSize="xs"
                                layout="horizontal"
                            />
                        )}
                    </div>
                );
            })
        }
    </div>
</div>

<style>
    @reference "../global.css";
    #post-listing-container:has(.filter-button input:checked) .post-item {
        @apply hidden;
    }

    #post-listing-container:has(
            .filter-button input[value="observations"]:checked
        )
        .post-item[data-kind="observations"],
    #post-listing-container:has(.filter-button input[value="notes"]:checked)
        .post-item[data-kind="notes"],
    #post-listing-container:has(.filter-button input[value="thoughts"]:checked)
        .post-item[data-kind="thoughts"] {
        @apply flex;
    }

    .filter-button:has(input:checked) {
        @apply bg-primary text-light;
    }
</style>

<script>
    const container = document.getElementById("post-listing-container");
    const checkboxes = container?.querySelectorAll<HTMLInputElement>(
        ".filter-button input",
    );

    checkboxes?.forEach((checkbox) => {
        checkbox.addEventListener("change", () => {
            if (checkbox.checked) {
                checkboxes.forEach((otherCheckbox) => {
                    if (otherCheckbox !== checkbox) {
                        otherCheckbox.checked = false;
                    }
                });
            }
        });
    });
</script>
