---
import dayjs from "dayjs";
import utc from "dayjs/plugin/utc";
import { type HierarchicalBlogNode } from "../blogIndex";
import Breadcrumbs from "./Breadcrumbs.astro";
import KindIcon from "./KindIcon.astro";
import PostDates from "./PostDates.astro";

dayjs.extend(utc);

interface Props {
    posts: HierarchicalBlogNode[];
}
const { posts } = Astro.props;
const kinds = [
    ...new Set(
        posts
            .map((node) => node.data?.kind)
            .filter((kind) => kind !== undefined),
    ),
];
---

<div id="post-listing-container">
    {
        kinds.length > 0 && (
            <div class="mb-8 flex flex-wrap items-center gap-2">
                {kinds.map((kind) => {
                    return (
                        <button
                            class:list={[
                                "filter-button",
                                "flex items-center gap-1 rounded px-2 py-1 text-sm capitalize transition",
                                "bg-light-gray text-dark hover:bg-gray",
                            ]}
                            data-filter={kind}
                        >
                            <KindIcon
                                kind={kind}
                                class="inline-block h-4 w-4"
                            />
                            {kind}
                        </button>
                    );
                })}
            </div>
        )
    }

    <div id="posts-list" class="flex flex-col gap-12">
        {
            posts.map((node) => {
                const itemKind = node.data?.kind;

                const pathParts = node.id.split("/").filter((s) => s);
                const itemBreadcrumbs = pathParts.map((segment, index, arr) => {
                    const fragment = arr.slice(0, index + 1).join("/");
                    return { label: segment, fragment: fragment };
                });

                return (
                    <div
                        class="post-item flex flex-col gap-1"
                        data-kind={itemKind}
                    >
                        <div class="flex flex-row items-center gap-1">
                            <KindIcon
                                kind={itemKind}
                                isFolder={node.isFolder}
                                class="size-4 stroke-dark-gray"
                            />
                            {itemBreadcrumbs.length > 0 && (
                                <Breadcrumbs
                                    baseUrl="/posts"
                                    breadcrumbs={itemBreadcrumbs}
                                />
                            )}
                        </div>

                        <h2 class="font-serif text-2xl font-semibold text-dark">
                            <a href={`/posts/${node.id}/`}>{node.title}</a>
                        </h2>

                        {node.data?.description && !node.isFolder && (
                            <span class="font-sans text-sm/snug text-dark-gray italic">
                                {node.data.description}
                            </span>
                        )}

                        {!node.isFolder && (
                            <PostDates
                                createdTime={dayjs(node.data?.published)}
                                lastModified={dayjs(node.data?.published)}
                                iconSize="sm"
                                textSize="xs"
                                layout="horizontal"
                            />
                        )}
                    </div>
                );
            })
        }
    </div>
</div>

<script>
    const activeClasses = ["bg-primary", "text-light", "hover:bg-secondary"];
    const inactiveClasses = ["bg-light-gray", "text-dark", "hover:bg-gray"];

    const container = document.getElementById("post-listing-container");
    const postItems = container?.querySelectorAll<HTMLElement>(".post-item");
    const filterButtons =
        container?.querySelectorAll<HTMLButtonElement>(".filter-button");
    let currentFilter: string | null = null;

    if (filterButtons && filterButtons.length > 0) {
        filterButtons.forEach((button) => {
            button.addEventListener("click", () => {
                const filter = button.getAttribute("data-filter");
                let effectiveFilter: string | null;

                if (button.classList.contains(activeClasses[0])) {
                    button.classList.remove(...activeClasses);
                    button.classList.add(...inactiveClasses);
                    currentFilter = null;
                    effectiveFilter = null;
                } else {
                    filterButtons.forEach((btn) => {
                        btn.classList.remove(...activeClasses);
                        btn.classList.add(...inactiveClasses);
                    });
                    button.classList.remove(...inactiveClasses);
                    button.classList.add(...activeClasses);
                    currentFilter = filter;
                    effectiveFilter = filter;
                }

                postItems?.forEach((item) => {
                    const postKind = item.getAttribute("data-kind");
                    if (
                        !effectiveFilter ||
                        postKind === effectiveFilter ||
                        !postKind
                    ) {
                        item.style.display = "flex";
                    } else {
                        item.style.display = "none";
                    }
                });
            });
        });
    }
</script>
