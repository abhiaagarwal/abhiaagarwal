---
import { compress, trimUndefinedRecursively } from "compress-json";
import type { OptimizedGraphData } from "./Graph.types";
import { compressGraphData } from "./Graph.types";

interface Props {
    graphData: OptimizedGraphData;
}

const { graphData } = Astro.props;
trimUndefinedRecursively(graphData);
const keyCompressedData = compressGraphData(graphData);
const compressedGraphData = compress(keyCompressedData);
---

<style is:global>
    #force-graph-svg {
        & .node text {
            pointer-events: none;
            user-select: none;
            text-anchor: middle;
        }

        & .node,
        & .link {
            transition: opacity 0.3s ease-in-out;
        }

        & .node.fade,
        & .link.fade {
            opacity: 0.15;
        }

        & .node:not(.fade),
        & .link:not(.fade) {
            opacity: 1;
        }
    }
</style>

<div
    id="graph-container"
    class="m-auto h-[calc(100vh-9rem)] max-w-3xl cursor-default overflow-hidden rounded-lg border-1 border-light-gray"
    data-graph-data={JSON.stringify(compressedGraphData)}
>
    <svg id="force-graph-svg" class="block h-full w-full"></svg>
</div>

<script>
    import { decompress } from "compress-json";
    import * as d3 from "d3";
    import type { 
        IndexedGraphNode, 
        OptimizedGraphData, 
        CompressedOptimizedGraphData 
    } from "./Graph.types";
    import { decompressGraphData } from "./Graph.types";

    interface NodeDataForSim extends d3.SimulationNodeDatum {
        index: number;
        name: string;
        fullPath: string;
        isFolder: boolean;
        initialDepth: number;
        parentIndex?: number;
        visualRadius?: number;
    }

    interface LinkDataForSim extends d3.SimulationLinkDatum<NodeDataForSim> {
        isBacklink: boolean;
        source: string | NodeDataForSim;
        target: string | NodeDataForSim;
    }

    const CONFIG = {
        BASE_RADIUS: 10,
        VISUAL_RADIUS_SCALE_FACTOR: 0.8,
        MIN_VISUAL_RADIUS: 3,
        RADIAL_INCREMENT: 120,
        RADIAL_STRENGTH: 0.9,
        SIM_ALPHA_DECAY: 0.018,
        SIM_CHARGE_STRENGTH: -1200,
        DRAG_ALPHA_TARGET: 0.1,
        BACKLINK_DISTANCE: 90,
        HIERARCHICAL_DISTANCE: 40,
        BACKLINK_STRENGTH: 0.1,
        HIERARCHICAL_STRENGTH: 0.9,
    } as const;

    /**
     * Reconstructs the full path of a node by traversing up the tree
     */
    function reconstructPath(
        nodeIndex: number,
        nodes: IndexedGraphNode[],
    ): string {
        const node = nodes[nodeIndex];
        if (!node) return "";

        if (node.parentIndex === undefined) {
            return "/";
        }

        const pathSegments: string[] = [];
        let currentIndex: number | undefined = nodeIndex;

        while (
            currentIndex !== undefined &&
            nodes[currentIndex].parentIndex !== undefined
        ) {
            const currentNode: IndexedGraphNode = nodes[currentIndex];
            if (currentNode.name !== "Home") {
                pathSegments.unshift(currentNode.name);
            }
            currentIndex = currentNode.parentIndex;
        }

        return pathSegments.length > 0 ? "/" + pathSegments.join("/") : "/";
    }

    /**
     * Converts optimized data to simulation-ready format
     */
    function prepareSimulationData(optimizedData: OptimizedGraphData): {
        nodes: NodeDataForSim[];
        links: LinkDataForSim[];
    } {
        const simNodes: NodeDataForSim[] = optimizedData.nodes.map((node) => ({
            index: node.index,
            name: node.name,
            fullPath: reconstructPath(node.index, optimizedData.nodes),
            isFolder: node.isFolder,
            initialDepth: node.initialDepth,
            parentIndex: node.parentIndex,
        }));

        const simLinks: LinkDataForSim[] = [];

        optimizedData.hierarchicalLinks.forEach(
            ([sourceIndex, targetIndex]) => {
                simLinks.push({
                    source: sourceIndex.toString(),
                    target: targetIndex.toString(),
                    isBacklink: false,
                });
            },
        );

        optimizedData.backlinks.forEach(([sourceIndex, targetIndex]) => {
            simLinks.push({
                source: sourceIndex.toString(),
                target: targetIndex.toString(),
                isBacklink: true,
            });
        });

        return { nodes: simNodes, links: simLinks };
    }

    /**
     * Pre-computes visual radius for a node and caches it
     */
    function computeNodeVisualRadius(node: NodeDataForSim): number {
        if (node.visualRadius !== undefined) return node.visualRadius;

        const depth = isFinite(node.initialDepth) ? node.initialDepth : 5;
        const depthFactor = Math.pow(CONFIG.VISUAL_RADIUS_SCALE_FACTOR, depth);
        node.visualRadius = Math.max(
            CONFIG.MIN_VISUAL_RADIUS,
            CONFIG.BASE_RADIUS * depthFactor,
        );
        return node.visualRadius;
    }

    /**
     * Creates a unique key for link deduplication
     */
    function getLinkKey(link: LinkDataForSim): string {
        const sourceIndex =
            typeof link.source === "string"
                ? parseInt(link.source)
                : (link.source as NodeDataForSim).index;
        const targetIndex =
            typeof link.target === "string"
                ? parseInt(link.target)
                : (link.target as NodeDataForSim).index;
        return sourceIndex < targetIndex
            ? `${sourceIndex}-${targetIndex}`
            : `${targetIndex}-${sourceIndex}`;
    }

    /**
     * Builds adjacency map for efficient neighbor lookups
     */
    function buildAdjacencyMap(
        nodes: NodeDataForSim[],
        links: LinkDataForSim[],
    ): Map<number, Set<number>> {
        const adjacencyMap = new Map<number, Set<number>>();

        nodes.forEach((node) =>
            adjacencyMap.set(node.index, new Set<number>()),
        );

        links.forEach((link) => {
            const sourceIndex =
                typeof link.source === "string"
                    ? parseInt(link.source)
                    : (link.source as NodeDataForSim).index;
            const targetIndex =
                typeof link.target === "string"
                    ? parseInt(link.target)
                    : (link.target as NodeDataForSim).index;
            adjacencyMap.get(sourceIndex)?.add(targetIndex);
            adjacencyMap.get(targetIndex)?.add(sourceIndex);
        });

        return adjacencyMap;
    }

    /**
     * Creates and configures the D3 simulation
     */
    function createSimulation(
        nodes: NodeDataForSim[],
        links: LinkDataForSim[],
        width: number,
        height: number,
    ): d3.Simulation<NodeDataForSim, LinkDataForSim> {
        const linkForce = d3.forceLink<NodeDataForSim, LinkDataForSim>(links);
        linkForce.id((d: NodeDataForSim) => d.index.toString());
        linkForce.distance((d: LinkDataForSim) =>
            d.isBacklink
                ? CONFIG.BACKLINK_DISTANCE
                : CONFIG.HIERARCHICAL_DISTANCE,
        );
        linkForce.strength((d: LinkDataForSim) =>
            d.isBacklink
                ? CONFIG.BACKLINK_STRENGTH
                : CONFIG.HIERARCHICAL_STRENGTH,
        );

        return d3
            .forceSimulation<NodeDataForSim, LinkDataForSim>(nodes)
            .force("link", linkForce)
            .force(
                "charge",
                d3.forceManyBody().strength(CONFIG.SIM_CHARGE_STRENGTH),
            )
            .force("center", d3.forceCenter(width / 2, height / 2))
            .force(
                "collide",
                d3
                    .forceCollide<NodeDataForSim>()
                    .radius(
                        (d: NodeDataForSim) => computeNodeVisualRadius(d) + 4,
                    )
                    .iterations(2),
            )
            .force(
                "radial",
                d3
                    .forceRadial(
                        (d: NodeDataForSim) =>
                            isFinite(d.initialDepth)
                                ? d.initialDepth * CONFIG.RADIAL_INCREMENT
                                : Math.max(width, height) * 1.5,
                        width / 2,
                        height / 2,
                    )
                    .strength((d: NodeDataForSim) =>
                        isFinite(d.initialDepth)
                            ? CONFIG.RADIAL_STRENGTH
                            : 0.05,
                    ),
            )
            .alphaDecay(CONFIG.SIM_ALPHA_DECAY)
            .alphaTarget(0);
    }

    /**
     * Creates SVG elements for links
     */
    function createLinkElements(
        linkGroup: d3.Selection<SVGGElement, unknown, HTMLElement, undefined>,
        links: LinkDataForSim[],
    ) {
        return linkGroup
            .selectAll("line.link")
            .data<LinkDataForSim>(links, (d: any) => getLinkKey(d))
            .join("line")
            .attr(
                "class",
                (d: LinkDataForSim) =>
                    `link stroke-gray ${d.isBacklink ? "stroke-1 [stroke-dasharray:3,3]" : "stroke-2"}`,
            ) as d3.Selection<
            SVGLineElement,
            LinkDataForSim,
            SVGGElement,
            unknown
        >;
    }

    /**
     * Creates SVG elements for nodes
     */
    function createNodeElements(
        nodeGroup: d3.Selection<SVGGElement, unknown, any, any>,
        nodes: NodeDataForSim[],
    ) {
        const nodeElements = nodeGroup
            .selectAll<SVGGElement, NodeDataForSim>("g.node")
            .data<NodeDataForSim>(nodes, (d: NodeDataForSim) =>
                d.index.toString(),
            )
            .join<SVGGElement>("g")
            .attr("class", "node");

        nodeElements
            .append("circle")
            .attr("r", computeNodeVisualRadius)
            .attr("class", "cursor-pointer")
            .attr(
                "style",
                (d) =>
                    `fill: color-mix(in oklch, var(--color-secondary), var(--color-primary) ${(100 / (d.initialDepth + 1) ** 0.6).toFixed(2)}%)`,
            );

        nodeElements
            .append("text")
            .attr("dy", "0.35em")
            .attr("y", (d: NodeDataForSim) => (computeNodeVisualRadius(d) + 7).toFixed(2))
            .attr("class", "text-xs fill-dark")
            .text((d: NodeDataForSim) => d.name);

        return nodeElements;
    }

    /**
     * Sets up drag behavior for nodes
     */
    function setupDragBehavior(
        simulation: d3.Simulation<NodeDataForSim, LinkDataForSim>,
    ) {
        return d3
            .drag<SVGGElement, NodeDataForSim>()
            .on(
                "start",
                function (
                    this: SVGGElement,
                    event: d3.D3DragEvent<
                        SVGGElement,
                        NodeDataForSim,
                        NodeDataForSim
                    >,
                    d: NodeDataForSim,
                ) {
                    if (!event.active)
                        simulation
                            .alphaTarget(CONFIG.DRAG_ALPHA_TARGET)
                            .restart();
                    d.fx = d.x;
                    d.fy = d.y;
                    d3.select(this)
                        .classed("cursor-grabbing", true)
                        .classed("cursor-pointer", false);
                },
            )
            .on(
                "drag",
                (
                    event: d3.D3DragEvent<
                        SVGGElement,
                        NodeDataForSim,
                        NodeDataForSim
                    >,
                    d: NodeDataForSim,
                ) => {
                    d.fx = event.x;
                    d.fy = event.y;
                },
            )
            .on(
                "end",
                function (
                    this: SVGGElement,
                    event: d3.D3DragEvent<
                        SVGGElement,
                        NodeDataForSim,
                        NodeDataForSim
                    >,
                    d: NodeDataForSim,
                ) {
                    if (!event.active) simulation.alphaTarget(0);
                    if (d.index !== 0) {
                        // Don't release root node
                        d.fx = null;
                        d.fy = null;
                    }
                    d3.select(this)
                        .classed("cursor-grabbing", false)
                        .classed("cursor-pointer", true);
                },
            );
    }

    /**
     * Sets up mouse interaction handlers for nodes
     */
    function setupMouseInteractions(
        nodeElements: d3.Selection<SVGGElement, NodeDataForSim, any, any>,
        linkElements: d3.Selection<
            SVGLineElement,
            LinkDataForSim,
            SVGGElement,
            unknown
        >,
        adjacencyMap: Map<number, Set<number>>,
    ) {
        nodeElements
            .on("click", (event: MouseEvent, d: NodeDataForSim) => {
                if (event.defaultPrevented) return;
                const postPath =
                    d.fullPath === "/" ? "/" : `/posts${d.fullPath}/`;
                window.location.href = postPath;
            })
            .on(
                "mouseover",
                function (
                    this: SVGGElement,
                    event: MouseEvent,
                    d: NodeDataForSim,
                ) {
                    const neighbors = new Set(adjacencyMap.get(d.index) || []);
                    neighbors.add(d.index);

                    nodeElements.classed(
                        "fade",
                        (n: NodeDataForSim) => !neighbors.has(n.index),
                    );
                    d3.select(this).select("circle").classed("highlight", true);
                    d3.select(this).classed("fade", false);

                    linkElements.classed("fade", (l: LinkDataForSim) => {
                        const sourceIndex =
                            typeof l.source === "string"
                                ? parseInt(l.source)
                                : (l.source as NodeDataForSim).index;
                        const targetIndex =
                            typeof l.target === "string"
                                ? parseInt(l.target)
                                : (l.target as NodeDataForSim).index;
                        return (
                            sourceIndex !== d.index && targetIndex !== d.index
                        );
                    });
                },
            )
            .on("mouseout", function (this: SVGGElement) {
                nodeElements.classed("fade", false);
                d3.select(this).select("circle").classed("highlight", false);
                linkElements.classed("fade", false);
            });
    }

    /**
     * Creates the tick function for simulation updates
     */
    function createTickFunction(
        linkElements: d3.Selection<
            SVGLineElement,
            LinkDataForSim,
            SVGGElement,
            unknown
        >,
        nodeElements: d3.Selection<SVGGElement, NodeDataForSim, any, any>,
    ) {
        return () => {
            linkElements
                .attr(
                    "x1",
                    (d: LinkDataForSim) => (d.source as NodeDataForSim).x ?? 0,
                )
                .attr(
                    "y1",
                    (d: LinkDataForSim) => (d.source as NodeDataForSim).y ?? 0,
                )
                .attr(
                    "x2",
                    (d: LinkDataForSim) => (d.target as NodeDataForSim).x ?? 0,
                )
                .attr(
                    "y2",
                    (d: LinkDataForSim) => (d.target as NodeDataForSim).y ?? 0,
                );

            nodeElements.attr(
                "transform",
                (d: NodeDataForSim) => `translate(${d.x ?? 0},${d.y ?? 0})`,
            );
        };
    }

    /**
     * Handles window/container resize
     */
    function setupResizeHandler(
        container: HTMLElement,
        svg: d3.Selection<SVGSVGElement, unknown, any, any>,
        simulation: d3.Simulation<NodeDataForSim, LinkDataForSim>,
        nodes: NodeDataForSim[],
        rootIndex: number,
    ) {
        let width = container.clientWidth;
        let height = container.clientHeight;

        const resizeObserver = new ResizeObserver((entries) => {
            const entry = entries[0];
            if (!entry) return;

            const newWidth = entry.contentRect.width;
            const newHeight = entry.contentRect.height;

            if (width === newWidth && height === newHeight) return;

            width = newWidth;
            height = newHeight;

            svg.attr("width", width).attr("height", height);

            simulation.force("center", d3.forceCenter(width / 2, height / 2));

            const radialForce =
                simulation.force<d3.ForceRadial<NodeDataForSim>>("radial");
            if (radialForce) {
                radialForce
                    .x(width / 2)
                    .y(height / 2)
                    .radius((node: NodeDataForSim) =>
                        isFinite(node.initialDepth)
                            ? node.initialDepth * CONFIG.RADIAL_INCREMENT
                            : Math.max(width, height) * 1.5,
                    );
            }

            const rootNode = nodes.find((n) => n.index === rootIndex);
            if (rootNode) {
                rootNode.fx = width / 2;
                rootNode.fy = height / 2;
            }

            simulation.alpha(0.4).restart();

            setTimeout(() => {
                simulation.alphaTarget(0);
            }, 1500);
        });

        resizeObserver.observe(container);
    }

    /**
     * Main function to initialize and run the graph simulation
     */
    function runSimulation() {
        const container = document.getElementById("graph-container");
        if (!container) {
            console.error("Graph container not found!");
            return;
        }

        const svg = d3.select<SVGSVGElement, unknown>("#force-graph-svg");
        const rawGraphData = container.dataset.graphData;

        if (!rawGraphData) {
            console.error("Graph data not found on container dataset!");
            return;
        }

        const compressedData: CompressedOptimizedGraphData = decompress(
            JSON.parse(rawGraphData),
        );
        const optimizedData: OptimizedGraphData = decompressGraphData(compressedData);
        const { nodes, links } = prepareSimulationData(optimizedData);

        nodes.forEach(computeNodeVisualRadius);

        const adjacencyMap = buildAdjacencyMap(nodes, links);

        let width = container.clientWidth;
        let height = container.clientHeight;

        const rootNode = nodes.find((n) => n.index === optimizedData.rootIndex);
        if (rootNode) {
            rootNode.fx = width / 2;
            rootNode.fy = height / 2;
        }

        const simulation = createSimulation(nodes, links, width, height);

        const linkGroup = svg.append("g").attr("class", "links");
        const nodeGroup = svg.append("g").attr("class", "nodes");

        const zoomBehavior = d3
            .zoom<SVGSVGElement, unknown>()
            .scaleExtent([0.1, 8])
            .on("zoom", (event: d3.D3ZoomEvent<SVGSVGElement, unknown>) => {
                linkGroup.attr("transform", event.transform.toString());
                nodeGroup.attr("transform", event.transform.toString());
            });
        svg.call(zoomBehavior);

        const linkElements = createLinkElements(linkGroup, links);
        const nodeElements = createNodeElements(nodeGroup, nodes);

        const dragBehavior = setupDragBehavior(simulation);
        nodeElements.call(dragBehavior);
        setupMouseInteractions(nodeElements as any, linkElements, adjacencyMap);

        const ticked = createTickFunction(linkElements, nodeElements);
        simulation.on("tick", ticked);

        setupResizeHandler(
            container,
            svg,
            simulation,
            nodes,
            optimizedData.rootIndex,
        );

        simulation.alpha(1).restart();

        setTimeout(() => {
            simulation.alphaTarget(0);
        }, 2000);

        ticked();
    }

    runSimulation();
</script>
