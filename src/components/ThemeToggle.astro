---
import Moon from "@lucide/astro/icons/moon";
import Sun from "@lucide/astro/icons/sun";
import SunMoon from "@lucide/astro/icons/sun-moon";

interface Props {
    className?: string;
}

const { className } = Astro.props;

const themeConfig = {
    light: { Icon: Sun },
    dark: { Icon: Moon },
    system: { Icon: SunMoon },
};
const themes = Object.keys(themeConfig);
---

<button
    type="button"
    id="theme-toggle-button"
    aria-label="Toggle theme"
    transition:persist
    class:list={[
        className,
        "relative flex h-8 w-8 cursor-pointer overflow-hidden rounded-md",
    ]}
>
    {
        themes.map((theme) => {
            const { Icon } = themeConfig[theme];
            return (
                <Icon
                    id={`theme-icon-${theme}`}
                    class="pointer-events-none absolute inset-0 m-auto block opacity-0"
                />
            );
        })
    }
    <span class="sr-only">Toggle theme</span>
</button>

<script>
    const STORAGE_KEY = "theme-preference";
    const THEMES = ["light", "dark", "system"];
    const button = document.getElementById("theme-toggle-button")!;

    const themeLabels = {
        light: "Currently Light Mode, Switch to Dark Mode",
        dark: "Currently Dark Mode, Switch to System Preference",
        system: "Currently System Preference, Switch to Light Mode",
    };

    const getCurrentPreferenceFromAttribute = (): string => {
        const preference = document.documentElement.dataset.themePreference;
        return preference && THEMES.includes(preference)
            ? preference
            : "system";
    };

    const applyEffectiveTheme = (preference: string): void => {
        const isDark =
            preference === "dark" ||
            (preference === "system" &&
                window.matchMedia("(prefers-color-scheme: dark)").matches);
        document.documentElement.dataset.theme = isDark ? "dark" : "light";
    };

    const setPreference = (preference: string): void => {
        if (!THEMES.includes(preference)) {
            preference = "system";
        }

        localStorage.setItem(STORAGE_KEY, preference);
        document.documentElement.dataset.themePreference = preference;

        applyEffectiveTheme(preference);

        button.setAttribute(
            "aria-label",
            themeLabels[preference] || "Toggle theme",
        );
        button.setAttribute("aria-value-text", preference);
    };

    const cyclePreference = (): void => {
        const currentPreference = getCurrentPreferenceFromAttribute();
        const currentIndex = THEMES.indexOf(currentPreference);
        const nextIndex = (currentIndex + 1) % THEMES.length;
        setPreference(THEMES[nextIndex]);
    };

    const handleSystemChange = (): void => {
        const currentPreference = getCurrentPreferenceFromAttribute();
        if (currentPreference === "system") {
            applyEffectiveTheme("system");
        }
    };

    const initialPreference = getCurrentPreferenceFromAttribute();
    button.setAttribute(
        "aria-label",
        themeLabels[initialPreference] || "Toggle theme",
    );
    button.setAttribute("aria-value-text", initialPreference);

    applyEffectiveTheme(initialPreference);

    button.addEventListener("click", cyclePreference);

    const mediaQuery = window.matchMedia("(prefers-color-scheme: dark)");
    mediaQuery.addEventListener("change", handleSystemChange);
</script>

<style>
    @reference "../styles/global.css";

    html[data-theme-preference="light"] #theme-icon-light,
    html[data-theme-preference="dark"] #theme-icon-dark,
    html[data-theme-preference="system"] #theme-icon-system {
        @apply pointer-events-auto opacity-100 transition-colors ease-in-out;
    }
</style>
