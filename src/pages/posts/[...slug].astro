---
import { getCollection, getEntry, render } from "astro:content";
import type { AstroComponentFactory } from "astro/runtime/server/index.js";
import dayjs from "dayjs";
import utc from "dayjs/plugin/utc";
import {
    blogIndex as blogIndexPromise,
    type HierarchicalBlogNode,
} from "../../blogIndex";
import Breadcrumbs from "../../components/Breadcrumbs.astro";
import KindIcon from "../../components/KindIcon.astro";
import Listing from "../../components/Listing.astro";
import PostDates from "../../components/PostDates.astro";
import Prose from "../../components/Prose.astro";
import Base from "../../layouts/Base.astro";

dayjs.extend(utc);

interface Props {
    currentNode: HierarchicalBlogNode;
}

export async function getStaticPaths() {
    const allNodesMap = await blogIndexPromise;

    const paths = [];

    for (const node of allNodesMap.values()) {
        if (node.isFolder) {
            paths.push({
                params: { slug: node.id },
                props: { currentNode: node },
            });
        } else {
            if (node.isFolderNote) continue;

            const originalEntry = await getEntry("blog", node.id);
            if (originalEntry?.data.published !== undefined) {
                paths.push({
                    params: { slug: node.id },
                    props: { currentNode: node },
                });
            }
        }
    }
    return paths;
}

const { currentNode } = Astro.props;

const allNodesMap = await blogIndexPromise;
const allBlogEntries = await getCollection("blog");

let PostContentComponent: AstroComponentFactory | null = null;
let FolderNoteContentComponent: AstroComponentFactory | null = null;
let childrenForListing: HierarchicalBlogNode[] = [];

if (currentNode.isFolder) {
    if (currentNode.contentPath) {
        const contentNode = allNodesMap.get(currentNode.contentPath);
        if (contentNode?.id) {
            const folderNoteEntry = allBlogEntries.find(
                (entry) => entry.id === contentNode.id,
            );
            if (folderNoteEntry) {
                const { Content: RenderedFolderNoteContent } =
                    await render(folderNoteEntry);
                FolderNoteContentComponent = RenderedFolderNoteContent;
            }
        }
    }

    childrenForListing = Array.from(currentNode.children)
        .map((childId: string) => allNodesMap.get(childId))
        .filter(
            (
                childNode?: HierarchicalBlogNode,
            ): childNode is HierarchicalBlogNode => childNode !== undefined,
        )
        .filter((childNode: HierarchicalBlogNode) => {
            if (childNode.isFolder) return true;
            const originalEntry = allBlogEntries.find(
                (entry) => entry.id === childNode.id,
            );
            return originalEntry?.data.published !== undefined;
        });
} else {
    const actualPostEntry = allBlogEntries.find((p) => p.id === currentNode.id);
    if (actualPostEntry) {
        const { Content: RenderedPostContent } = await render(actualPostEntry);
        PostContentComponent = RenderedPostContent;
    }
}

const pageTitle = currentNode.title;

const seoTitle = pageTitle;
const seoDescription =
    currentNode.data?.description ??
    `${currentNode.isFolder ? "Explore" : "Read"} ${pageTitle} on Abhi Agarwal's blog`;
const seoType = currentNode.isFolder ? "website" : "article";
const seoTags = currentNode.data?.tags ?? [];

const breadcrumbSegments = currentNode.id
    .split("/")
    .filter((segment: string) => segment)
    .map((segment: string, index: number, arr: string[]) => {
        const path = arr.slice(0, index + 1).join("/");
        return { label: segment, fragment: path };
    });

const backlinkData = Array.from(currentNode.backlinks)
    .map((backlinkId: string) => {
        const backlinkNode = allNodesMap.get(backlinkId);
        if (!backlinkNode) return null;
        if (!backlinkNode.isFolder) {
            const originalEntry = allBlogEntries.find(
                (entry) => entry.id === backlinkNode.id,
            );
            if (originalEntry?.data.published !== undefined) return null;
        }
        return {
            url: `/posts/${backlinkId}/`,
            title: backlinkNode.title || backlinkId,
        };
    })
    .filter((link) => link !== null) as { url: string; title: string }[];
---

<Base
    title={seoTitle}
    description={seoDescription}
    type={seoType}
    tags={seoTags}
>
    <div class="m-auto max-w-2xl">
        <div class="mb-6 flex flex-col gap-2">
            <div class="flex flex-row items-center gap-1">
                <KindIcon
                    kind={currentNode.data?.kind}
                    isFolder={currentNode.isFolder}
                    class="h-4 w-4 stroke-dark-gray"
                />
                <Breadcrumbs
                    baseUrl="/posts"
                    breadcrumbs={[...breadcrumbSegments]}
                />
            </div>
            <h1 class="font-serif text-3xl font-semibold text-dark">
                {pageTitle}
            </h1>
            {
                !currentNode.isFolder && (
                    <PostDates
                        createdTime={dayjs(currentNode.data?.published)}
                        lastModified={dayjs(currentNode.data?.published)}
                        iconSize="md"
                        textSize="sm"
                        layout="horizontal"
                        className="text-dark-gray"
                    />
                )
            }
        </div>
        <Prose>
            {FolderNoteContentComponent && <FolderNoteContentComponent />}
            {
                !currentNode.isFolder && PostContentComponent && (
                    <PostContentComponent />
                )
            }
        </Prose>
        {
            currentNode.isFolder && childrenForListing.length > 0 && (
                <div
                    class:list={[
                        "mt-8",
                        { "border-t pt-4": !!FolderNoteContentComponent },
                    ]}
                >
                    <Listing posts={childrenForListing} />
                </div>
            )
        }
        {
            backlinkData.length > 0 && (
                <div class="mt-8 border-t pt-4 text-dark">
                    {backlinkData.length > 0 && (
                        <>
                            <h2 class="mb-2 font-serif text-xl font-semibold">
                                Backlinks
                            </h2>
                            <ul class="list-disc pl-5">
                                {backlinkData.map((link) => (
                                    <li>
                                        <a
                                            href={link.url}
                                            class="text-dark-grey"
                                        >
                                            {link.title}
                                        </a>
                                    </li>
                                ))}
                            </ul>
                        </>
                    )}
                </div>
            )
        }
    </div>
</Base>
