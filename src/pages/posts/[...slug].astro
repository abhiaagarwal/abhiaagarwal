---
import { getCollection, getEntry, render } from "astro:content";
import type { AstroComponentFactory } from "astro/runtime/server/index.js";
import dayjs from "dayjs";
import timezone from "dayjs/plugin/timezone";
import utc from "dayjs/plugin/utc";
import {
    blogIndex as blogIndexPromise,
    type HierarchicalBlogNode,
} from "../../blogIndex";
import Breadcrumbs from "../../components/Breadcrumbs.astro";
import FeedIcons from "../../components/FeedIcons.astro";
import Giscus from "../../components/Giscus.astro";
import KindIcon from "../../components/KindIcon.astro";
import Listing from "../../components/Listing.astro";
import PostDates from "../../components/PostDates.astro";
import Prose from "../../components/Prose.astro";
import Base from "../../layouts/Base.astro";
import { feedConfigToLinks, generateFeedUrls } from "../../util/feeds";
import { parseInlineCode } from "../../util/parseInlineCode";

dayjs.extend(utc);
dayjs.extend(timezone);

interface Props {
    currentNode: HierarchicalBlogNode;
}

const { pathname } = Astro.url;

export async function getStaticPaths() {
    const allNodesMap = await blogIndexPromise;

    const paths = [];

    for (const node of allNodesMap.values()) {
        if (node.isFolder) {
            paths.push({
                params: { slug: node.id },
                props: { currentNode: node },
            });
        } else {
            if (node.isFolderNote) continue;

            const originalEntry = await getEntry("blog", node.id);
            if (originalEntry?.data.published !== undefined) {
                paths.push({
                    params: { slug: node.id },
                    props: { currentNode: node },
                });
            }
        }
    }
    return paths;
}

const { currentNode } = Astro.props;

const allNodesMap = await blogIndexPromise;
const allBlogEntries = await getCollection("blog");

let PostContentComponent: AstroComponentFactory | null = null;
let FolderNoteContentComponent: AstroComponentFactory | null = null;
let childrenForListing: HierarchicalBlogNode[] = [];

if (currentNode.isFolder) {
    if (currentNode.contentPath !== undefined) {
        const folderNoteEntry = await getEntry("blog", currentNode.contentPath);
        if (folderNoteEntry) {
            const { Content: RenderedFolderNoteContent } =
                await render(folderNoteEntry);
            FolderNoteContentComponent = RenderedFolderNoteContent;
        }
    }

    childrenForListing = Array.from(currentNode.children)
        .map((childId: string) => allNodesMap.get(childId))
        .filter(
            (
                childNode?: HierarchicalBlogNode,
            ): childNode is HierarchicalBlogNode => childNode !== undefined,
        )
        .filter((childNode: HierarchicalBlogNode) => {
            if (childNode.isFolder) return true;
            const originalEntry = allBlogEntries.find(
                (entry) => entry.id === childNode.id,
            );
            return originalEntry?.data.published !== undefined;
        });
} else {
    const actualPostEntry = allBlogEntries.find((p) => p.id === currentNode.id);
    if (actualPostEntry) {
        const { Content: RenderedPostContent } = await render(actualPostEntry);
        PostContentComponent = RenderedPostContent;
    }
}

const pageTitle = currentNode.title;

const seoTitle = pageTitle;
const seoDescription =
    currentNode.data?.description ??
    `${currentNode.isFolder ? "Explore" : "Read"} ${pageTitle} on Abhi Agarwal's blog`;
const seoType = currentNode.isFolder ? "website" : "article";
const seoTags = currentNode.data?.tags ?? [];

const breadcrumbSegments = currentNode.id
    .split("/")
    .filter((segment: string) => segment)
    .map((segment: string, index: number, arr: string[]) => {
        const path = arr.slice(0, index + 1).join("/");
        return {
            label: segment,
            fragment: path,
            active: path === pathname.slice("posts/".length + 1, -1),
        };
    });

const backlinkData = Array.from(currentNode.backlinks)
    .map((backlinkId: string) => {
        const backlinkNode = allNodesMap.get(backlinkId);
        if (!backlinkNode) return null;
        if (!backlinkNode.isFolder) {
            const originalEntry = allBlogEntries.find(
                (entry) => entry.id === backlinkNode.id,
            );
            if (!originalEntry) return null;
        }
        return {
            url: `/posts/${backlinkId}/`,
            title: backlinkNode.title || backlinkId,
        };
    })
    .filter((link) => link !== null);

// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
const siteUrl = Astro.site!.toString();
const feeds = currentNode.isFolder
    ? generateFeedUrls(siteUrl, currentNode.id)
    : undefined;
---

<Base
    title={seoTitle}
    description={seoDescription}
    type={seoType}
    tags={seoTags}
    publishedTime={dayjs(currentNode.data?.published)}
    feeds={feeds}
>
    <div class="m-auto flex max-w-2xl flex-col gap-6">
        <div class="flex flex-col gap-2">
            <div class="flex flex-row items-center gap-1">
                <KindIcon
                    kind={currentNode.data?.kind}
                    isFolder={currentNode.isFolder}
                    class="h-4 w-4 stroke-dark-gray"
                />
                <Breadcrumbs
                    baseUrl="/posts"
                    breadcrumbs={[...breadcrumbSegments]}
                />
            </div>
            <div class="flex items-center justify-between">
                <h1 class="font-serif text-3xl font-semibold text-dark">
                    <Fragment set:html={parseInlineCode(pageTitle)} />
                </h1>
                {
                    currentNode.isFolder && feeds && (
                        <FeedIcons
                            feeds={feedConfigToLinks(feeds, currentNode.title)}
                            size="md"
                        />
                    )
                }
            </div>
            {
                !currentNode.isFolder && (
                    <PostDates
                        createdTime={dayjs(currentNode.data?.published)}
                        lastModified={dayjs(currentNode.data?.published)}
                        iconSize="md"
                        textSize="sm"
                        layout="horizontal"
                        className="text-dark-gray"
                    />
                )
            }
        </div>
        <Prose>
            {FolderNoteContentComponent && <FolderNoteContentComponent />}
            {
                !currentNode.isFolder && PostContentComponent && (
                    <PostContentComponent />
                )
            }
        </Prose>
        {
            currentNode.isFolder && childrenForListing.length > 0 && (
                <>
                    <hr class="border-dark-gray" />
                    <Listing posts={childrenForListing} />
                </>
            )
        }
        {
            backlinkData.length > 0 && (
                <>
                    <hr class="border-dark-gray" />
                    <h2 class="mb-2 font-serif text-xl font-semibold">
                        Backlinks
                    </h2>
                    <ul class="list-disc pl-5">
                        {backlinkData.map((link) => (
                            <li>
                                <a href={link.url} class="text-dark-grey">
                                    {link.title}
                                </a>
                            </li>
                        ))}
                    </ul>
                </>
            )
        }
        <Fragment>
            <hr class="my-6 border-dark-gray" />
            <Giscus />
        </Fragment>
    </div>
</Base>
