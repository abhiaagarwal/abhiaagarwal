---
import {
    blogIndex as blogIndexPromise,
    type HierarchicalBlogNode,
} from "../blogIndex";
import Graph from "../components/Graph.astro";
import type {
    IndexedGraphNode,
    OptimizedGraphData,
} from "../components/Graph.types";
import Layout from "../layouts/Base.astro";

const SYNTHETIC_ROOT_ID = "/";

/**
 * Checks if a node should be included in the graph (not a draft)
 */
function shouldIncludeNode(node: HierarchicalBlogNode): boolean {
    return node.isFolder || node.data?.published !== undefined;
}

/**
 * Gets the effective graph ID for a node, handling folder notes
 */
function getEffectiveGraphId(
    originalId: string,
    allNodesMap: Map<string, HierarchicalBlogNode>,
): string {
    const node = allNodesMap.get(originalId);
    if (node?.isFolderNote && !node.isFolder && node.parent) {
        return "/" + node.parent;
    }
    return "/" + originalId;
}

/**
 * Calculates depths for all nodes using recursive traversal
 */
function calculateNodeDepths(
    allNodesMap: Map<string, HierarchicalBlogNode>,
): Map<string, number> {
    const depths = new Map<string, number>();
    depths.set(SYNTHETIC_ROOT_ID, 0);
    const rootNodes = Array.from(allNodesMap.values()).filter(
        (node) => !node.parent,
    );

    function setDepthRecursively(nodeId: string, depth: number): void {
        const graphId = "/" + nodeId;
        if (depths.has(graphId)) return;
        depths.set(graphId, depth);

        const node = allNodesMap.get(nodeId);
        if (node) {
            for (const childId of node.children) {
                setDepthRecursively(childId, depth + 1);
            }
        }
    }

    for (const rootNode of rootNodes) {
        setDepthRecursively(rootNode.id, 1);
    }

    return depths;
}

/**
 * Creates optimized indexed nodes directly from blog data
 */
function createOptimizedNodes(
    allNodesMap: Map<string, HierarchicalBlogNode>,
    depths: Map<string, number>,
): {
    nodes: IndexedGraphNode[];
    nodeIdToIndex: Map<string, number>;
    rootIndex: number;
} {
    const nodes: IndexedGraphNode[] = [];
    const nodeIdToIndex = new Map<string, number>();
    let currentIndex = 0;

    nodes.push({
        index: currentIndex,
        name: "Home",
        isFolder: true,
        initialDepth: 0,
    });
    nodeIdToIndex.set(SYNTHETIC_ROOT_ID, currentIndex);
    const rootIndex = currentIndex;
    currentIndex++;

    const validNodes: {
        node: HierarchicalBlogNode;
        graphId: string;
        depth: number;
    }[] = [];

    for (const node of allNodesMap.values()) {
        if (!shouldIncludeNode(node)) continue;

        if (node.isFolderNote && !node.isFolder) continue;

        const graphId = getEffectiveGraphId(node.id, allNodesMap);
        const depth = depths.get(graphId);

        if (depth === undefined) {
            console.warn(
                `Node ${graphId} has undefined depth and will be skipped.`,
            );
            continue;
        }

        if (nodeIdToIndex.has(graphId)) continue;

        validNodes.push({ node, graphId, depth });
    }

    validNodes.sort(
        (a, b) => a.graphId.split("/").length - b.graphId.split("/").length,
    );

    for (const { node, graphId, depth } of validNodes) {
        const name =
            graphId === "/" ? "Home" : (graphId.split("/").pop() ?? "Unknown");

        const parentIndex = (() => {
            if (graphId === "/") return undefined;
            const pathSegments = graphId.split("/").filter(Boolean);
            if (pathSegments.length > 1) {
                const parentPath = "/" + pathSegments.slice(0, -1).join("/");
                return nodeIdToIndex.get(parentPath);
            }
            return nodeIdToIndex.get("/");
        })();

        nodes.push({
            index: currentIndex,
            name,
            isFolder: node.isFolder,
            initialDepth: depth,
            parentIndex,
        });
        nodeIdToIndex.set(graphId, currentIndex);
        currentIndex++;
    }

    return { nodes, nodeIdToIndex, rootIndex };
}

/**
 * Creates hierarchical links using indices
 */
function createOptimizedHierarchicalLinks(
    allNodesMap: Map<string, HierarchicalBlogNode>,
    nodeIdToIndex: Map<string, number>,
): [number, number][] {
    const links: [number, number][] = [];
    const processedLinks = new Set<string>();

    for (const node of allNodesMap.values()) {
        if (!shouldIncludeNode(node)) continue;

        const sourceGraphId = getEffectiveGraphId(node.id, allNodesMap);
        const sourceIndex = nodeIdToIndex.get(sourceGraphId);

        if (sourceIndex === undefined) continue;

        if (!node.parent) {
            const rootIndex = nodeIdToIndex.get(SYNTHETIC_ROOT_ID);
            if (rootIndex !== undefined) {
                const linkKey = `${rootIndex.toString()}->${sourceIndex.toString()}`;
                if (!processedLinks.has(linkKey)) {
                    links.push([rootIndex, sourceIndex]);
                    processedLinks.add(linkKey);
                }
            }
        }

        for (const childId of node.children) {
            const childNode = allNodesMap.get(childId);
            if (childNode && shouldIncludeNode(childNode)) {
                const targetGraphId = getEffectiveGraphId(childId, allNodesMap);
                const targetIndex = nodeIdToIndex.get(targetGraphId);

                if (targetIndex !== undefined && sourceIndex !== targetIndex) {
                    const linkKey = `${sourceIndex.toString()}->${targetIndex.toString()}`;
                    if (!processedLinks.has(linkKey)) {
                        links.push([sourceIndex, targetIndex]);
                        processedLinks.add(linkKey);
                    }
                }
            }
        }
    }

    return links;
}

/**
 * Creates backlinks using indices
 */
function createOptimizedBacklinks(
    allNodesMap: Map<string, HierarchicalBlogNode>,
    nodeIdToIndex: Map<string, number>,
    hierarchicalLinks: [number, number][],
): [number, number][] {
    const backlinks: [number, number][] = [];
    const processedLinks = new Set<string>();

    const hierarchicalKeys = new Set<string>();
    for (const [sourceIndex, targetIndex] of hierarchicalLinks) {
        hierarchicalKeys.add(
            `${sourceIndex.toString()}->${targetIndex.toString()}`,
        );
        hierarchicalKeys.add(
            `${targetIndex.toString()}->${sourceIndex.toString()}`,
        );
    }

    for (const node of allNodesMap.values()) {
        if (!shouldIncludeNode(node)) continue;

        const targetGraphId = getEffectiveGraphId(node.id, allNodesMap);
        const targetIndex = nodeIdToIndex.get(targetGraphId);

        if (targetIndex === undefined) continue;

        for (const backlinkerId of node.backlinks) {
            const backlinkerNode = allNodesMap.get(backlinkerId);
            if (!backlinkerNode || !shouldIncludeNode(backlinkerNode)) continue;

            const sourceGraphId = getEffectiveGraphId(
                backlinkerId,
                allNodesMap,
            );
            const sourceIndex = nodeIdToIndex.get(sourceGraphId);
            const rootIndex = nodeIdToIndex.get(SYNTHETIC_ROOT_ID);

            if (
                sourceIndex === undefined ||
                sourceIndex === targetIndex ||
                sourceIndex === rootIndex ||
                targetIndex === rootIndex
            )
                continue;

            const linkKey1 = `${sourceIndex.toString()}->${targetIndex.toString()}`;
            const linkKey2 = `${targetIndex.toString()}->${sourceIndex.toString()}`;

            if (
                hierarchicalKeys.has(linkKey1) ||
                hierarchicalKeys.has(linkKey2)
            )
                continue;

            if (processedLinks.has(linkKey1) || processedLinks.has(linkKey2))
                continue;

            backlinks.push([sourceIndex, targetIndex]);
            processedLinks.add(linkKey1);
            processedLinks.add(linkKey2);
        }
    }

    return backlinks;
}

/**
 * Main function to build optimized graph data directly
 */
function buildOptimizedGraphData(
    allNodesMap: Map<string, HierarchicalBlogNode>,
): OptimizedGraphData {
    const depths = calculateNodeDepths(allNodesMap);
    const { nodes, nodeIdToIndex, rootIndex } = createOptimizedNodes(
        allNodesMap,
        depths,
    );
    const hierarchicalLinks = createOptimizedHierarchicalLinks(
        allNodesMap,
        nodeIdToIndex,
    );
    const backlinks = createOptimizedBacklinks(
        allNodesMap,
        nodeIdToIndex,
        hierarchicalLinks,
    );

    return {
        nodes,
        hierarchicalLinks,
        backlinks,
        rootIndex,
    };
}

const allNodesMap: Map<string, HierarchicalBlogNode> = await blogIndexPromise;
const optimizedGraphData = buildOptimizedGraphData(allNodesMap);
---

<Layout
    title="Explore"
    description="Interactive knowledge graph visualization of Abhi Agarwal's blog posts, notes, and thoughts."
    type="website"
>
    <Graph graphData={optimizedGraphData} />
</Layout>
