---
import { getCollection } from "astro:content";
import {
    blogIndex as blogIndexPromise,
    type PostIndexEntry,
} from "../blogIndex";
import Graph from "../components/Graph.astro";
import Layout from "../layouts/Base.astro";

interface HierarchicalNode {
    name: string;
    path: string;
    title?: string;
    children?: HierarchicalNode[];
    backlinks?: string[];
    outgoingLinks?: string[];
}

const allPostsIndex = await blogIndexPromise;

const root: HierarchicalNode = {
    name: "Content Root",
    path: "/",
    children: [],
};

function findOrCreateNode(
    segments: string[],
    parent: HierarchicalNode,
    fullPath: string,
    postEntry?: PostIndexEntry,
): void {
    let currentLevel = parent.children!;
    let currentPath = "";

    for (let i = 0; i < segments.length; i++) {
        const segment = segments[i];
        currentPath = currentPath ? `${currentPath}/${segment}` : `/${segment}`;

        let node = currentLevel.find(
            (child) => child.name === segment && child.path === currentPath,
        );

        if (!node) {
            node = {
                name: segment,
                path: currentPath,
                children: [],
            };
            currentLevel.push(node);
        }

        if (i === segments.length - 1) {
            if (postEntry) {
                node.title = postEntry.title;
                node.backlinks = postEntry.backlinks.map((slug) => "/" + slug);
                node.outgoingLinks = postEntry.outgoingLinks.map(
                    (slug) => slug,
                );
                delete node.children;
            }
        } else {
            if (!node.children) {
                node.children = [];
            }
            currentLevel = node.children;
        }
    }
}

for (const postEntry of allPostsIndex.values()) {
    if (postEntry.data.draft === true) continue;

    const slug = postEntry.id;
    const segments = slug.split("/").filter(Boolean);
    if (segments.length > 0) {
        findOrCreateNode(segments, root, slug, postEntry);
    }
}

function sortChildren(node: HierarchicalNode): void {
    if (node.children) {
        node.children.sort((a, b) => a.name.localeCompare(b.name));
        node.children.forEach(sortChildren);
    }
}
sortChildren(root);

const hierarchicalData = root;
---

<Layout><Graph data={hierarchicalData} /></Layout>
